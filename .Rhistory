ggtree::geom_rootedge(0.01) + #xlim(-0.1, 0.2)
xlim(-0.025,1)
firstplot
secondplot<-ggtree(secondTree, color="#000000", branch.length = T) +
geom_tiplab(linetype=2, linesize=.2, size=3.6, offset=0.0, align=T, hjust=1)+ # 2.8 half for screen
geom_nodelab()+
ggtree::geom_rootedge(0.01) + #xlim(-0.1, 0.2)
xlim(-0.025,1)
# modify secondplot - right to left
secondplot$data$x <- max(secondplot$data$x) - secondplot$data$x
secondplot
# fix labels (right to left)
secondplotBuild<-ggplot_build(secondplot)
secondplotBuild$data[[4]]$x<-min(secondplot$data$x)
secondplotBuild$data[[3]]$x<-min(secondplot$data$x)
# fix root line
secondplotBuild$data[[6]]$xend<-secondplotBuild$data[[6]]$x+(secondplotBuild$data[[6]]$x-secondplotBuild$data[[6]]$xend)
# dataframe for connecting lines purposes
posdf<-data.frame(x=max(firstplot$data$x)+.1, xend=1, name=firstTree$tip.label )
posdf$y <- firstplot$data$y[match(posdf$name, firstplot$data$label)]
posdf$yend <- secondplot$data$y[match(posdf$name, secondplot$data$label)]
# add lines to plot
firstplotLines <- firstplot + geom_segment(mapping=aes(x=x, y=y, xend=xend,yend=yend), data=posdf, color="grey")
# Plot
secondplotBuildTable<-ggplot_gtable(secondplotBuild)
gridExtra::grid.arrange(firstplotLines, secondplotBuildTable, ncol=2)
library(dada2)
packageVersion("dada2")
library(ShortRead)
packageVersion("ShortRead")
library(Biostrings)
packageVersion("Biostrings")
path <- "D:/GitHub/Seagrass Diversity/seagrass-diversity/data_raw/Run 1/1912KMI-0008"  ## CHANGE ME to the directory containing the fastq files.
list.files(path)
fnFs <- sort(list.files(path, pattern = "_R1.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2.fastq.gz", full.names = TRUE))
# Identifying Primers
FWD <- "GTGCCAGCMGCCGCGGTAA"  ## CHANGE ME to your forward primer sequence
REV <- "GGACTACHVGGGTWTCTAAT"  ## CHANGE ME...
allOrients <- function(primer) {
# Create all orientations of the input sequence
require(Biostrings)
dna <- DNAString(primer)  # The Biostrings works w/ DNAString objects rather than character vectors
orients <- c(Forward = dna, Complement = complement(dna), Reverse = reverse(dna),
RevComp = reverseComplement(dna))
return(sapply(orients, toString))  # Convert back to character vector
}
FWD.orients <- allOrients(FWD)
REV.orients <- allOrients(REV)
FWD.orients
# Pre-filtering to remove Ns
fnFs.filtN <- file.path(path, "filtN", basename(fnFs)) # Put N-filterd files in filtN/ subdirectory
fnRs.filtN <- file.path(path, "filtN", basename(fnRs))
pre_filter <- filterAndTrim(fnFs, fnFs.filtN, fnRs, fnRs.filtN, maxN = 0, multithread = TRUE)
pre_filter <- filterAndTrim(fnFs, fnFs.filtN, fnRs, fnRs.filtN, maxN = 0, multithread = TRUE)
head(pre_filter)
primerHits <- function(primer, fn) {
# Counts number of reads in which the primer is found
nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
return(sum(nhits > 0))
}
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))
cutadapt <- "C:\Users\User\AppData\Roaming\Python\Python37\site-packages\cutadapt" # CHANGE ME to the cutadapt path on your machine
cutadapt <- "C:/Users/User/AppData/Roaming/Python/Python37/site-packages/cutadapt" # CHANGE ME to the cutadapt path on your machine
system2(cutadapt, args = "--version") # Run shell commands from R
FWD.RC <- dada2:::rc(FWD)
REV.RC <- dada2:::rc(REV)
# Trim FWD and the reverse-complement of REV off of R1 (forward reads)
R1.flags <- paste("-g", FWD, "-a", REV.RC)
# Trim REV and the reverse-complement of FWD off of R2 (reverse reads)
R2.flags <- paste("-G", REV, "-A", FWD.RC)
# Run Cutadapt
for(i in seq_along(fnFs)) {
system2(cutadapt, args = c(R1.flags, R2.flags, "-n", 2, # -n 2 required to remove FWD and REV from reads
"-o", fnFs.cut[i], "-p", fnRs.cut[i], # output files
fnFs.filtN[i], fnRs.filtN[i])) # input files
}
library(dada2)
packageVersion("dada2")
library(ShortRead)
packageVersion("ShortRead")
library(Biostrings)
packageVersion("Biostrings")
path <- "D:/GitHub/Seagrass Diversity/seagrass-diversity/data_raw/Run 1/1912KMI-0008"  ## CHANGE ME to the directory containing the fastq files.
list.files(path)
fnFs <- sort(list.files(path, pattern = "_R1.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2.fastq.gz", full.names = TRUE))
# Identifying Primers
FWD <- "GTGCCAGCMGCCGCGGTAA"  ## CHANGE ME to your forward primer sequence
REV <- "GGACTACHVGGGTWTCTAAT"  ## CHANGE ME...
allOrients <- function(primer) {
# Create all orientations of the input sequence
require(Biostrings)
dna <- DNAString(primer)  # The Biostrings works w/ DNAString objects rather than character vectors
orients <- c(Forward = dna, Complement = complement(dna), Reverse = reverse(dna),
RevComp = reverseComplement(dna))
return(sapply(orients, toString))  # Convert back to character vector
}
FWD.orients <- allOrients(FWD)
REV.orients <- allOrients(REV)
FWD.orients
# Pre-filtering to remove Ns
fnFs.filtN <- file.path(path, "filtN", basename(fnFs)) # Put N-filterd files in filtN/ subdirectory
fnRs.filtN <- file.path(path, "filtN", basename(fnRs))
head(pre_filter)
primerHits <- function(primer, fn) {
# Counts number of reads in which the primer is found
nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
return(sum(nhits > 0))
}
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))
cutadapt <- "C:/Users/User/AppData/Roaming/Python/Python37/site-packages/cutadapt" # CHANGE ME to the cutadapt path on your machine
system2(cutadapt, args = "--version") # Run shell commands from R
path.cut <- file.path(path, "cutadapt")
if(!dir.exists(path.cut)) dir.create(path.cut)
fnFs.cut <- file.path(path.cut, basename(fnFs))
fnRs.cut <- file.path(path.cut, basename(fnRs))
FWD.RC <- dada2:::rc(FWD)
REV.RC <- dada2:::rc(REV)
# Trim FWD and the reverse-complement of REV off of R1 (forward reads)
R1.flags <- paste("-g", FWD, "-a", REV.RC)
# Trim REV and the reverse-complement of FWD off of R2 (reverse reads)
R2.flags <- paste("-G", REV, "-A", FWD.RC)
# Run Cutadapt
for(i in seq_along(fnFs)) {
system2(cutadapt, args = c(R1.flags, R2.flags, "-n", 2, # -n 2 required to remove FWD and REV from reads
"-o", fnFs.cut[i], "-p", fnRs.cut[i], # output files
fnFs.filtN[i], fnRs.filtN[i])) # input files
}
# Run Cutadapt
for(i in seq_along(fnFs)) {
system2(cutadapt, args = c(R1.flags, R2.flags, "-n", 2, # -n 2 required to remove FWD and REV from reads
"-o", fnFs.cut[i], "-p", fnRs.cut[i], # output files
fnFs.filtN[i], fnRs.filtN[i])) # input files
}
cutadapt <- "C:/Users/User/AppData/Roaming/Python/Python37/site-packages/cutadapt/" # CHANGE ME to the cutadapt path on your machine
system2(cutadapt, args = "--version") # Run shell commands from R
path.cut <- file.path(path, "cutadapt")
if(!dir.exists(path.cut)) dir.create(path.cut)
fnFs.cut <- file.path(path.cut, basename(fnFs))
fnRs.cut <- file.path(path.cut, basename(fnRs))
FWD.RC <- dada2:::rc(FWD)
REV.RC <- dada2:::rc(REV)
# Trim FWD and the reverse-complement of REV off of R1 (forward reads)
R1.flags <- paste("-g", FWD, "-a", REV.RC)
# Trim REV and the reverse-complement of FWD off of R2 (reverse reads)
R2.flags <- paste("-G", REV, "-A", FWD.RC)
# Run Cutadapt
for(i in seq_along(fnFs)) {
system2(cutadapt, args = c(R1.flags, R2.flags, "-n", 2, # -n 2 required to remove FWD and REV from reads
"-o", fnFs.cut[i], "-p", fnRs.cut[i], # output files
fnFs.filtN[i], fnRs.filtN[i])) # input files
}
pre_filter
head(pre_filter)
primerHits <- function(primer, fn) {
# Counts number of reads in which the primer is found
nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
return(sum(nhits > 0))
}
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))
cutadapt <- "C:/Users/User/AppData/Roaming/Python/Python37/site-packages/cutadapt/" # CHANGE ME to the cutadapt path on your machine
system2(cutadapt, args = "--version") # Run shell commands from R
cutadapt <- "C:/Users/User/AppData/Roaming/Python/Python37/site-packages/cutadapt/" # CHANGE ME to the cutadapt path on your machine
system2(cutadapt, args = "--version") # Run shell commands from R
path.cut <- file.path(path, "cutadapt")
if(!dir.exists(path.cut)) dir.create(path.cut)
fnFs.cut <- file.path(path.cut, basename(fnFs))
fnRs.cut <- file.path(path.cut, basename(fnRs))
FWD.RC <- dada2:::rc(FWD)
REV.RC <- dada2:::rc(REV)
# Trim FWD and the reverse-complement of REV off of R1 (forward reads)
R1.flags <- paste("-g", FWD, "-a", REV.RC)
# Trim REV and the reverse-complement of FWD off of R2 (reverse reads)
R2.flags <- paste("-G", REV, "-A", FWD.RC)
# Run Cutadapt
for(i in seq_along(fnFs)) {
system2(cutadapt, args = c(R1.flags, R2.flags, "-n", 2, # -n 2 required to remove FWD and REV from reads
"-o", fnFs.cut[i], "-p", fnRs.cut[i], # output files
fnFs.filtN[i], fnRs.filtN[i])) # input files
}
cutadapt <- "C:/users/user/appdata/roaming/python/python37/site-packages/cutadapt/" # CHANGE ME to the cutadapt path on your machine
system2(cutadapt, args = "--version") # Run shell commands from R
path.cut <- file.path(path, "cutadapt")
if(!dir.exists(path.cut)) dir.create(path.cut)
fnFs.cut <- file.path(path.cut, basename(fnFs))
fnRs.cut <- file.path(path.cut, basename(fnRs))
FWD.RC <- dada2:::rc(FWD)
REV.RC <- dada2:::rc(REV)
# Trim FWD and the reverse-complement of REV off of R1 (forward reads)
R1.flags <- paste("-g", FWD, "-a", REV.RC)
# Trim REV and the reverse-complement of FWD off of R2 (reverse reads)
R2.flags <- paste("-G", REV, "-A", FWD.RC)
# Run Cutadapt
for(i in seq_along(fnFs)) {
system2(cutadapt, args = c(R1.flags, R2.flags, "-n", 2, # -n 2 required to remove FWD and REV from reads
"-o", fnFs.cut[i], "-p", fnRs.cut[i], # output files
fnFs.filtN[i], fnRs.filtN[i])) # input files
}
#C:\Users\e0453664\AppData\Roaming\Python\Python38\Scripts
#C:\Users\e0453664\AppData\Roaming\Python\Python38\Scripts\cutadapt
#C:/Users/User/AppData/Roaming/Python/Python37/site-packages/cutadapt/
cutadapt <- "C:/users/user/appdata/roaming/python/python37/site-packages/cutadapt/"
system2(cutadapt, args = "--version")
path.cut <- file.path(path, "cutadapt")
if(!dir.exists(path.cut)) dir.create(path.cut)
fnFs.cut <- file.path(path.cut, basename(fnFs))
fnRs.cut <- file.path(path.cut, basename(fnRs))
FWD.RC <- dada2:::rc(FWD)
REV.RC <- dada2:::rc(REV)
# Trim FWD and the reverse-complement of REV off of R1 (forward reads)
R1.flags <- paste("-g", FWD, "-a", REV.RC)
# Trim REV and the reverse-complement of FWD off of R2 (reverse reads)
R2.flags <- paste("-G", REV, "-A", FWD.RC)
# Run Cutadapt
for(i in seq_along(fnFs)) {
system2(cutadapt, args = c(R1.flags, R2.flags, "-n", 2, # -n 2 required to remove FWD and REV from reads
"-o", fnFs.cut[i], "-p", fnRs.cut[i], # output files
fnFs.filtN[i], fnRs.filtN[i])) # input files
}
library(dada2)
packageVersion("dada2")
library(ShortRead)
packageVersion("ShortRead")
library(Biostrings)
packageVersion("Biostrings")
path <- "./data_raw/EA/Run1/1912KMI-0008"
list.files(path)
fnFs <- sort(list.files(path, pattern = "_R1.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2.fastq.gz", full.names = TRUE))
FWD <- "TATGGTAATTGT"
REV <- "AGTCAGTCAGCC"
allOrients <- function(primer) {
# Create all orientations of the input sequence
require(Biostrings)
dna <- DNAString(primer)  # The Biostrings works w/ DNAString objects rather than character vectors
orients <- c(Forward = dna, Complement = complement(dna), Reverse = reverse(dna),
RevComp = reverseComplement(dna))
return(sapply(orients, toString))  # Convert back to character vector
}
FWD.orients <- allOrients(FWD)
REV.orients <- allOrients(REV)
FWD.orients
REV.orients
fnFs.filtN <- file.path(path, "filtN", basename(fnFs)) # Put N-filterd files in filtN/ subdirectory
fnRs.filtN <- file.path(path, "filtN", basename(fnRs))
###filterAndTrim(fnFs, fnFs.filtN, fnRs, fnRs.filtN, maxN = 0, multithread = TRUE)
#run_time <- system.time(filterAndTrim(fnFs, fnFs.filtN, fnRs, fnRs.filtN, maxN = 0, multithread = TRUE))
#run_time
primerHits <- function(primer, fn) {
# Counts number of reads in which the primer is found
nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
return(sum(nhits > 0))
}
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))
library(dada2)
packageVersion("dada2")
library(ShortRead)
packageVersion("ShortRead")
library(Biostrings)
packageVersion("Biostrings")
path <- "D:/GitHub/Seagrass Diversity/seagrass-diversity/data_raw/Run 1/1912KMI-0008"  ## CHANGE ME to the directory containing the fastq files.
list.files(path)
fnFs <- sort(list.files(path, pattern = "_R1.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2.fastq.gz", full.names = TRUE))
# Identifying Primers
FWD <- "GTGCCAGCMGCCGCGGTAA"  ## CHANGE ME to your forward primer sequence
REV <- "GGACTACHVGGGTWTCTAAT"  ## CHANGE ME...
allOrients <- function(primer) {
# Create all orientations of the input sequence
require(Biostrings)
dna <- DNAString(primer)  # The Biostrings works w/ DNAString objects rather than character vectors
orients <- c(Forward = dna, Complement = complement(dna), Reverse = reverse(dna),
RevComp = reverseComplement(dna))
return(sapply(orients, toString))  # Convert back to character vector
}
FWD.orients <- allOrients(FWD)
REV.orients <- allOrients(REV)
FWD.orients
# Pre-filtering to remove Ns
fnFs.filtN <- file.path(path, "filtN", basename(fnFs)) # Put N-filterd files in filtN/ subdirectory
fnRs.filtN <- file.path(path, "filtN", basename(fnRs))
pre_filter
head(pre_filter)
primerHits <- function(primer, fn) {
# Counts number of reads in which the primer is found
nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
return(sum(nhits > 0))
}
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))
cutadapt <- "C:/users/user/appdata/roaming/python/python37/site-packages/cutadapt/" # CHANGE ME to the cutadapt path on your machine
system2(cutadapt, args = "--version") # Run shell commands from R
path.cut <- file.path(path, "cutadapt")
if(!dir.exists(path.cut)) dir.create(path.cut)
fnFs.cut <- file.path(path.cut, basename(fnFs))
fnRs.cut <- file.path(path.cut, basename(fnRs))
FWD.RC <- dada2:::rc(FWD)
REV.RC <- dada2:::rc(REV)
# Trim FWD and the reverse-complement of REV off of R1 (forward reads)
R1.flags <- paste("-g", FWD, "-a", REV.RC)
# Trim REV and the reverse-complement of FWD off of R2 (reverse reads)
R2.flags <- paste("-G", REV, "-A", FWD.RC)
# Run Cutadapt
for(i in seq_along(fnFs)) {
system2(cutadapt, args = c(R1.flags, R2.flags, "-n", 2, # -n 2 required to remove FWD and REV from reads
"-o", fnFs.cut[i], "-p", fnRs.cut[i], # output files
fnFs.filtN[i], fnRs.filtN[i])) # input files
}
# Run Cutadapt
for(i in seq_along(fnFs)) {
system2(cutadapt, args = c(R1.flags, R2.flags, "-n", 2, # -n 2 required to remove FWD and REV from reads
"-o", fnFs.cut[i], "-p", fnRs.cut[i], # output files
fnFs.filtN[i], fnRs.filtN[i])) # input files
}
matrix(nrow = 6, dimnames = list(c("A", "B", "C", "D", "E", "F"), c("A", "B", "C", "D", "E", "F")))
matrix(c(0, 0.087950, 0.088430, 0.086040, 0.087360, 0.086330, 0.087950, 0, 0.014780, 0.029470, 0.030790, 0.029760, 0.088430, 0.014780, 0, 0.029950, 0.031270, 0.030240, 0.086040, 0.029470, 0.029950, 0, 0.008040, 0.007010, 0.087360, 0.030790, 0.031270, 0.008040, 0, 0.005970, 0.086330, 0.029760, 0.030240, 0.007010, 0.005970, 0), nrow = 6, dimnames = list(c("A", "B", "C", "D", "E", "F"), c("A", "B", "C", "D", "E", "F")))
host <- matrix(c(0, 0.087950, 0.088430, 0.086040, 0.087360, 0.086330, 0.087950, 0, 0.014780, 0.029470, 0.030790, 0.029760, 0.088430, 0.014780, 0, 0.029950, 0.031270, 0.030240, 0.086040, 0.029470, 0.029950, 0, 0.008040, 0.007010, 0.087360, 0.030790, 0.031270, 0.008040, 0, 0.005970, 0.086330, 0.029760, 0.030240, 0.007010, 0.005970, 0), nrow = 6, dimnames = list(c("A", "B", "C", "D", "E", "F"), c("A", "B", "C", "D", "E", "F")))
parasite <- matrix(c(0, 0.301180, 0.303510, 0.339580, 0.335630, 0.335730, 0.331230, 0.301180, 0, 0.187210, 0.373840, 0.369890, 0.369990, 0.365490, 0.303510, 0.187210, 0, 0.376170, 0.372220, 0.372320, 0.367820, 0.339580, 0.373840, 0.376170, 0, 0.114250, 0.261830, 0.257330, 0.335630, 0.369890, 0.372220, 0.114250, 0, 0.257880, 0.253380, 0.335730, 0.369990, 0.372320, 0.261830, 0.257880, 0, 0.139080, 0.331230, 0.365490, 0.367820, 0.257330, 0.253380, 0.139080, 0), nrow = 7, dimnames = list(c("A", "B", "C", "D", "E1", "E2", "F"), c("A", "B", "C", "D", "E1", "E2", "F")))
host
parasite
parasite1 <- parasite[-6,-6]
parasite1
parasite2 <- parasite[-5,-5]
parasite2
plot(parasite1~host)
host <- matrix(c(0, 0.087950, 0.088430, 0.086040, 0.087360, 999, 0.086330, 0.087950, 0, 0.014780, 0.029470, 0.030790, 999, 0.029760, 0.088430, 0.014780, 0, 0.029950, 0.031270, 999, 0.030240, 0.086040, 0.029470, 0.029950, 0, 0.008040, 0.007010, 999, 0.087360, 0.030790, 0.031270, 0.008040, 0, 0.005970, 999, 0.086330, 0.029760, 0.030240, 0.007010, 0.005970, 0, 999), nrow = 6, dimnames = list(c("A", "B", "C", "D", "E1", "E2", "F"), c("A", "B", "C", "D", "E1", "E2", "F")))
host <- matrix(c(0, 0.087950, 0.088430, 0.086040, 0.087360, 999, 0.086330, 0.087950, 0, 0.014780, 0.029470, 0.030790, 999, 0.029760, 0.088430, 0.014780, 0, 0.029950, 0.031270, 999, 0.030240, 0.086040, 0.029470, 0.029950, 0, 0.008040, 0.007010, 999, 0.087360, 0.030790, 0.031270, 0.008040, 0, 0.005970, 999, 0.086330, 0.030790, 0.031270, 0.008040, 0, 0.005970, 999, 0.086330, 0.029760, 0.030240, 0.007010, 0.005970, 0, 999), nrow = 6, dimnames = list(c("A", "B", "C", "D", "E1", "E2", "F"), c("A", "B", "C", "D", "E1", "E2", "F")))
host <- matrix(c(0, 0.087950, 0.088430, 0.086040, 0.087360, 999, 0.086330, 0.087950, 0, 0.014780, 0.029470, 0.030790, 999, 0.029760, 0.088430, 0.014780, 0, 0.029950, 0.031270, 999, 0.030240, 0.086040, 0.029470, 0.029950, 0, 0.008040, 999, 0.007010, 0.087360, 0.030790, 0.031270, 0.008040, 0, 999, 0.005970, 999, 999, 999, 999, 999, 999, 999, 0.086330, 0.029760, 0.030240, 0.007010, 0.005970, 999, 0), nrow = 6, dimnames = list(c("A", "B", "C", "D", "E1", "E2", "F"), c("A", "B", "C", "D", "E1", "E2", "F")))
host <- matrix(c(0, 0.087950, 0.088430, 0.086040, 0.087360, 999, 0.086330, 0.087950, 0, 0.014780, 0.029470, 0.030790, 999, 0.029760, 0.088430, 0.014780, 0, 0.029950, 0.031270, 999, 0.030240, 0.086040, 0.029470, 0.029950, 0, 0.008040, 999, 0.007010, 0.087360, 0.030790, 0.031270, 0.008040, 0, 999, 0.005970, 999, 999, 999, 999, 999, 999, 999, 0.086330, 0.029760, 0.030240, 0.007010, 0.005970, 999, 0), nrow = 7, dimnames = list(c("A", "B", "C", "D", "E1", "E2", "F"), c("A", "B", "C", "D", "E1", "E2", "F")))
parasite <- matrix(c(0, 0.301180, 0.303510, 0.339580, 0.335630, 0.335730, 0.331230, 0.301180, 0, 0.187210, 0.373840, 0.369890, 0.369990, 0.365490, 0.303510, 0.187210, 0, 0.376170, 0.372220, 0.372320, 0.367820, 0.339580, 0.373840, 0.376170, 0, 0.114250, 0.261830, 0.257330, 0.335630, 0.369890, 0.372220, 0.114250, 0, 0.257880, 0.253380, 0.335730, 0.369990, 0.372320, 0.261830, 0.257880, 0, 0.139080, 0.331230, 0.365490, 0.367820, 0.257330, 0.253380, 0.139080, 0), nrow = 7, dimnames = list(c("A", "B", "C", "D", "E1", "E2", "F"), c("A", "B", "C", "D", "E1", "E2", "F")))
host
parasite
host <- matrix(c(0, 0.087950, 0.088430, 0.086040, 0.087360, 0.087360, 0.086330, 0.087950, 0, 0.014780, 0.029470, 0.030790, 0.030790, 0.029760, 0.088430, 0.014780, 0, 0.029950, 0.031270, 0.031270, 0.030240, 0.086040, 0.029470, 0.029950, 0, 0.008040, 0.008040, 0.007010, 0.087360, 0.030790, 0.031270, 0.008040, 0, 0, 0.005970, 0.087360, 0.030790, 0.031270, 0.008040, 0, 0, 0.005970, 0.086330, 0.029760, 0.030240, 0.007010, 0.005970, 0.005970, 0), nrow = 7, dimnames = list(c("A", "B", "C", "D", "E1", "E2", "F"), c("A", "B", "C", "D", "E1", "E2", "F")))
parasite <- matrix(c(0, 0.301180, 0.303510, 0.339580, 0.335630, 0.335730, 0.331230, 0.301180, 0, 0.187210, 0.373840, 0.369890, 0.369990, 0.365490, 0.303510, 0.187210, 0, 0.376170, 0.372220, 0.372320, 0.367820, 0.339580, 0.373840, 0.376170, 0, 0.114250, 0.261830, 0.257330, 0.335630, 0.369890, 0.372220, 0.114250, 0, 0.257880, 0.253380, 0.335730, 0.369990, 0.372320, 0.261830, 0.257880, 0, 0.139080, 0.331230, 0.365490, 0.367820, 0.257330, 0.253380, 0.139080, 0), nrow = 7, dimnames = list(c("A", "B", "C", "D", "E1", "E2", "F"), c("A", "B", "C", "D", "E1", "E2", "F")))
host
parasite
plot(parasite~host)
df <- data.frame(hosts = c(0, 0.087950, 0.088430, 0.086040, 0.087360, 0.087360, 0.086330, 0.087950, 0, 0.014780, 0.029470, 0.030790, 0.030790, 0.029760, 0.088430, 0.014780, 0, 0.029950, 0.031270, 0.031270, 0.030240, 0.086040, 0.029470, 0.029950, 0, 0.008040, 0.008040, 0.007010, 0.087360, 0.030790, 0.031270, 0.008040, 0, 0, 0.005970, 0.087360, 0.030790, 0.031270, 0.008040, 0, 0, 0.005970, 0.086330, 0.029760, 0.030240, 0.007010, 0.005970, 0.005970, 0),
parasites = c(0, 0.301180, 0.303510, 0.339580, 0.335630, 0.335730, 0.331230, 0.301180, 0, 0.187210, 0.373840, 0.369890, 0.369990, 0.365490, 0.303510, 0.187210, 0, 0.376170, 0.372220, 0.372320, 0.367820, 0.339580, 0.373840, 0.376170, 0, 0.114250, 0.261830, 0.257330, 0.335630, 0.369890, 0.372220, 0.114250, 0, 0.257880, 0.253380, 0.335730, 0.369990, 0.372320, 0.261830, 0.257880, 0, 0.139080, 0.331230, 0.365490, 0.367820, 0.257330, 0.253380, 0.139080, 0))
df
lm1 <- lm(df$parasites ~ df$hosts)
plot(df$parasites ~ df$hosts)
plot(df$parasites ~ df$hosts)
plot(jitter(df$parasites) ~ df$hosts)
plot(jitter(df$parasites) ~ jitter(df$hosts))
plot(jitter(df$parasites, 1) ~ jitter(df$hosts, 1))
plot(jitter(df$parasites, 2) ~ jitter(df$hosts, 2))
plot(jitter(df$parasites, 10) ~ jitter(df$hosts, 10))
abline(lm1)
abline(lm1, col = 'red')
lm1[2]
lm1[1]
lm1[[1]]
lm1[1][2]
lm1[1][1]
coefficients(lm1)
coefficients(lm1)[2]
a <- coefficients(lm1)[2]
a
cor(df$parasites, df$hosts)
n <- 10000
result <- numeric(n)
for i in 1:n:
result[i] <- cor(sample(df$parasites), df$hosts)
for (i in 1:n):
result[i] <- cor(sample(df$parasites), df$hosts)
for (i in 1:n){
result[i] <- cor(sample(df$parasites), df$hosts)
}
hist(result)
actual <- cor(df$parasites, df$hosts)
abline(v = actual)
hist(result, xlim = c(-0.6, 0.6))
abline(v = actual)
abline(v = actual, col = 'red')
mean(abs(result) >= abs(actual))
abs(result) >= abs(actual)
mean(abs(result) >= abs(actual))
df <- data.frame(hosts = c(0, 0.087950, 0.088430, 0.086040, 0.087360, 0.087360, 0.086330, 0.087950, 0, 0.014780, 0.029470, 0.030790, 0.030790, 0.029760, 0.088430, 0.014780, 0, 0.029950, 0.031270, 0.031270, 0.030240, 0.086040, 0.029470, 0.029950, 0, 0.008040, 0.008040, 0.007010, 0.087360, 0.030790, 0.031270, 0.008040, 0, 0, 0.005970, 0.087360, 0.030790, 0.031270, 0.008040, 0, 0, 0.005970, 0.086330, 0.029760, 0.030240, 0.007010, 0.005970, 0.005970, 0),
parasites = c(0, 0.301180, 0.303510, 0.339580, 0.335630, 0.335730, 0.331230, 0.301180, 0, 0.187210, 0.373840, 0.369890, 0.369990, 0.365490, 0.303510, 0.187210, 0, 0.376170, 0.372220, 0.372320, 0.367820, 0.339580, 0.373840, 0.376170, 0, 0.114250, 0.261830, 0.257330, 0.335630, 0.369890, 0.372220, 0.114250, 0, 0.257880, 0.253380, 0.335730, 0.369990, 0.372320, 0.261830, 0.257880, 0, 0.139080, 0.331230, 0.365490, 0.367820, 0.257330, 0.253380, 0.139080, 0))
abline(lm1, col = 'red')
plot(jitter(df$parasites, 10) ~ jitter(df$hosts, 10),
main = "Phylogenic distances of Hosts and Parasites",
xlab = "Hosts",
ylab = "Parasites")
abline(lm1, col = 'red')
actual <- cor(df$parasites, df$hosts)
n <- 10000
result <- numeric(n)
for (i in 1:n){
result[i] <- cor(sample(df$parasites), df$hosts)
}
for (i in 1:n){
result[i] <- cor(sample(df$parasites), df$hosts)
}
hist(result, xlim = c(-0.6, 0.6))
hist(result, xlim = c(-0.6, 0.6),
main = "Histogram of Random Correlations")
hist(result, xlim = c(-0.6, 0.6),
main = "Histogram of Random Correlations",
xlab = "Correlations")
abline(v = actual, col = 'red')
mean(abs(result) >= abs(actual))
for (i in 1:n){
result[i] <- cor(sample(df$parasites), df$hosts)
}
hist(result, xlim = c(-0.6, 0.6),
main = "Histogram of Random Correlations",
xlab = "Correlations")
abline(v = actual, col = 'red')
mean(abs(result) >= abs(actual))
host <- matrix(c(0, 0.087950, 0.088430, 0.086040, 0.087360, 0.087360, 0.086330, 0.087950, 0, 0.014780, 0.029470, 0.030790, 0.030790, 0.029760, 0.088430, 0.014780, 0, 0.029950, 0.031270, 0.031270, 0.030240, 0.086040, 0.029470, 0.029950, 0, 0.008040, 0.008040, 0.007010, 0.087360, 0.030790, 0.031270, 0.008040, 0, 0, 0.005970, 0.087360, 0.030790, 0.031270, 0.008040, 0, 0, 0.005970, 0.086330, 0.029760, 0.030240, 0.007010, 0.005970, 0.005970, 0), nrow = 7, dimnames = list(c("A", "B", "C", "D", "E1", "E2", "F"), c("A", "B", "C", "D", "E1", "E2", "F")))
parasite <- matrix(c(0, 0.301180, 0.303510, 0.339580, 0.335630, 0.335730, 0.331230, 0.301180, 0, 0.187210, 0.373840, 0.369890, 0.369990, 0.365490, 0.303510, 0.187210, 0, 0.376170, 0.372220, 0.372320, 0.367820, 0.339580, 0.373840, 0.376170, 0, 0.114250, 0.261830, 0.257330, 0.335630, 0.369890, 0.372220, 0.114250, 0, 0.257880, 0.253380, 0.335730, 0.369990, 0.372320, 0.261830, 0.257880, 0, 0.139080, 0.331230, 0.365490, 0.367820, 0.257330, 0.253380, 0.139080, 0), nrow = 7, dimnames = list(c("A", "B", "C", "D", "E1", "E2", "F"), c("A", "B", "C", "D", "E1", "E2", "F")))
host
parasite
library(dada2)
packageVersion("dada2")
library(ShortRead)
packageVersion("ShortRead")
library(Biostrings)
packageVersion("Biostrings")
path <- "D:/GitHub/Seagrass Diversity/seagrass-diversity/data_raw/Run 1/1912KMI-0008"  ## CHANGE ME to the directory containing the fastq files.
list.files(path)
fnFs <- sort(list.files(path, pattern = "_R1.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2.fastq.gz", full.names = TRUE))
# Identifying Primers
FWD <- "GTGCCAGCMGCCGCGGTAA"  ## CHANGE ME to your forward primer sequence
REV <- "GGACTACHVGGGTWTCTAAT"  ## CHANGE ME...
allOrients <- function(primer) {
# Create all orientations of the input sequence
require(Biostrings)
dna <- DNAString(primer)  # The Biostrings works w/ DNAString objects rather than character vectors
orients <- c(Forward = dna, Complement = complement(dna), Reverse = reverse(dna),
RevComp = reverseComplement(dna))
return(sapply(orients, toString))  # Convert back to character vector
}
FWD.orients <- allOrients(FWD)
REV.orients <- allOrients(REV)
FWD.orients
# Pre-filtering to remove Ns
fnFs.filtN <- file.path(path, "filtN", basename(fnFs)) # Put N-filterd files in filtN/ subdirectory
fnRs.filtN <- file.path(path, "filtN", basename(fnRs))
primerHits <- function(primer, fn) {
# Counts number of reads in which the primer is found
nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
return(sum(nhits > 0))
}
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))
cutadapt <- "C:/users/user/appdata/roaming/python/python37/site-packages/cutadapt/" # CHANGE ME to the cutadapt path on your machine
system2(cutadapt, args = "--version") # Run shell commands from R
path.cut <- file.path(path, "cutadapt")
if(!dir.exists(path.cut)) dir.create(path.cut)
fnFs.cut <- file.path(path.cut, basename(fnFs))
fnRs.cut <- file.path(path.cut, basename(fnRs))
FWD.RC <- dada2:::rc(FWD)
REV.RC <- dada2:::rc(REV)
# Trim FWD and the reverse-complement of REV off of R1 (forward reads)
R1.flags <- paste("-g", FWD, "-a", REV.RC)
# Trim REV and the reverse-complement of FWD off of R2 (reverse reads)
R2.flags <- paste("-G", REV, "-A", FWD.RC)
# Run Cutadapt
for(i in seq_along(fnFs)) {
system2(cutadapt, args = c(R1.flags, R2.flags, "-n", 2, # -n 2 required to remove FWD and REV from reads
"-o", fnFs.cut[i], "-p", fnRs.cut[i], # output files
fnFs.filtN[i], fnRs.filtN[i])) # input files
}
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))
# Pre-filtering to remove Ns
fnFs.filtN <- file.path(path, "filtN/trimmed", basename(fnFs)) # Put N-filterd files in filtN/ subdirectory
fnRs.filtN <- file.path(path, "filtN/trimmed", basename(fnRs))
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))
FWD.orients
fnFsT <- sort(list.files(path, pattern = "_R1_trimmed.fastq.gz", full.names = TRUE))
fnRsT <- sort(list.files(path, pattern = "_R2_trimmed.fastq.gz", full.names = TRUE))
fnFsT.filtN <- file.path(path, "filtN/trimmed", basename(fnFsT))
fnRsT.filtN <- file.path(path, "filtN/trimmed", basename(fnRsT))
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFsT.filtN[[1]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRsT.filtN[[1]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFsT.filtN[[1]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRsT.filtN[[1]]))
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[2]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[2]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[2]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[2]]))
